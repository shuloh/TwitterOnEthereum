{"version":3,"sources":["Store.tsx","Progress.tsx","UserRegistration.tsx","ReTweet.tsx","NewComment.tsx","ReadTweet.tsx","Tweets.tsx","Web3Button.tsx","NewTweet.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MAX_TWEETS_PER_PAGE","LoadingContext","React","createContext","undefined","LoadingDispatchContext","Web3Context","Web3DispatchContext","loadingReducer","state","action","web3Reducer","actionType","type","web3","payload","contract","handle","registered","nTweets","tweets","name","isReg","page","Error","LoadingProvider","children","useReducer","dispatch","Provider","value","Web3Provider","useLoadingState","context","useContext","useLoadingDispatch","useWeb3State","useWeb3Dispatch","loadWeb3","a","window","ethereum","autoRefreshOnNetworkChange","Web3","enable","console","log","provider","providers","HttpProvider","loadContract","on","location","reload","eth","getAccounts","accounts","account","net","getId","network","deployedAddress","EthTw33t","networks","address","abi","Contract","from","methods","isRegUser","call","addressUserName","options","lowerIndexRange","upperIndexRange","i","tweet","tweetCommentLength","nComments","comments","j","getTweetCommentId","tweetId","commentId","comment","push","loadTweets","offset","loadUser","newTweet","msg","send","reTweet","retweetId","retweet","readTweet","id","t","newComment","useStyles","makeStyles","theme","root","width","marginTop","spacing","height","Progress","classes","LinearProgress","color","className","textField","margin","button","paper","padding","backgroundColor","palette","secondary","main","UserRegistration","useState","setHandle","registering","setRegistering","register","error","Grid","container","direction","item","TextField","label","variant","onChange","e","target","Button","size","onClick","CircularProgress","Paper","Typography","ReTweet","props","open","setOpen","tweetMsg","setMsg","loadingDispatch","handleNewTweet","reTweetId","handleClose","disabled","Dialog","fullWidth","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","reTweetMsg","autoFocus","multiline","rows","DialogActions","NewComment","commentMsg","handleNewComment","map","key","authorName","ReadTweet","message","setMessage","handleClickOpen","display","flexWrap","background","default","minWidth","maxWidth","overflowWrap","marginLeft","marginRight","Tweets","loadingState","setOffset","handleOffset","Number","xs","zeroMinWidth","retweeted","justify","alignItems","InputLabelProps","shrink","inputProps","step","min","typo","text","primary","Web3Button","loading","event","preventDefault","NewTweet","minHeight","Home","Container","appTheme","createMuiTheme","App","ThemeProvider","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.998f473a.chunk.js","sourcesContent":["import React from 'react';\nimport Web3 from 'web3';\nimport { AbiItem } from 'web3-utils';\nimport { Contract } from 'web3-eth-contract';\nimport EthTw33t from './contracts/EthTw33t.json';\n\nconst MAX_TWEETS_PER_PAGE = 5;\ndeclare global {\n  interface Window {\n    ethereum: any;\n    web3: any;\n  }\n}\ntype Action =\n  | {\n      type: 'loadContract';\n      payload: any;\n    }\n  | {\n      type: 'loadUser';\n      payload: any;\n    }\n  | {\n      type: 'loadTweets';\n      payload: any;\n    }\n  | {\n      type: 'loadPage';\n      payload: number;\n    };\ntype Dispatch = (action: Action) => void;\ntype DispatchLoading = (action: boolean) => void;\ntype Tweet = {\n  author: string;\n  authorName: string;\n  message: string;\n  retweeted: boolean;\n  retweetId: number;\n  tweetId: number;\n  nComments: number;\n  comments: string[];\n};\ntype State = {\n  web3: Web3 | null;\n  contract: Contract | null;\n  nTweets: number;\n  tweets: Tweet[];\n  handle: string | null;\n  registered: boolean;\n  page: number;\n};\ntype Web3ProviderProps = { children: React.ReactNode };\nconst LoadingContext = React.createContext<boolean | undefined>(undefined);\nconst LoadingDispatchContext = React.createContext<DispatchLoading | undefined>(\n  undefined\n);\nconst Web3Context = React.createContext<State | undefined>(undefined);\nconst Web3DispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\nfunction loadingReducer(state: boolean, action: boolean) {\n  return action;\n}\nfunction web3Reducer(state: State, action: Action) {\n  const actionType = action.type;\n  switch (actionType) {\n    case 'loadContract': {\n      return {\n        ...state,\n        web3: action.payload.web3,\n        contract: action.payload.contract,\n        handle: action.payload.handle,\n        registered: action.payload.registered,\n        nTweets: action.payload.nTweets,\n        tweets: action.payload.tweets\n      };\n    }\n    case 'loadUser': {\n      return {\n        ...state,\n        handle: action.payload.name,\n        registered: action.payload.isReg\n      };\n    }\n    case 'loadTweets': {\n      return {\n        ...state,\n        tweets: action.payload.tweets,\n        nTweets: action.payload.nTweets\n      };\n    }\n    case 'loadPage': {\n      return {\n        ...state,\n        page: action.payload\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action type: ${actionType}`);\n    }\n  }\n}\nfunction LoadingProvider({ children }: Web3ProviderProps) {\n  const [state, dispatch] = React.useReducer(loadingReducer, false);\n  return (\n    <LoadingContext.Provider value={state}>\n      <LoadingDispatchContext.Provider value={dispatch}>\n        {children}\n      </LoadingDispatchContext.Provider>\n    </LoadingContext.Provider>\n  );\n}\nfunction Web3Provider({ children }: Web3ProviderProps) {\n  const [state, dispatch] = React.useReducer(web3Reducer, {\n    web3: null,\n    contract: null,\n    nTweets: 0,\n    tweets: [],\n    handle: null,\n    registered: false,\n    page: 1\n  });\n  return (\n    <Web3Context.Provider value={state}>\n      <Web3DispatchContext.Provider value={dispatch}>\n        {children}\n      </Web3DispatchContext.Provider>\n    </Web3Context.Provider>\n  );\n}\nfunction useLoadingState() {\n  const context = React.useContext(LoadingContext);\n  if (context === undefined) {\n    throw new Error('need Provider');\n  }\n  return context;\n}\nfunction useLoadingDispatch() {\n  const context = React.useContext(LoadingDispatchContext);\n  if (context === undefined) {\n    throw new Error('need Provider');\n  }\n  return context;\n}\nfunction useWeb3State() {\n  const context = React.useContext(Web3Context);\n  if (context === undefined) {\n    throw new Error('need Provider');\n  }\n  return context;\n}\nfunction useWeb3Dispatch() {\n  const context = React.useContext(Web3DispatchContext);\n  if (context === undefined) {\n    throw new Error('need Provider');\n  }\n  return context;\n}\n\nconst loadWeb3 = async (): Promise<Web3> => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    window.ethereum.autoRefreshOnNetworkChange = false;\n    const web3 = new Web3(window.ethereum);\n    // Request account access if needed\n    await window.ethereum.enable();\n    // Acccounts now exposed\n    return web3;\n  }\n  // Legacy dapp browsers...\n  if (window.web3) {\n    // Use Mist/MetaMask's provider.\n    const { web3 } = window;\n    console.log('Injected web3 detected.');\n    return web3;\n  }\n  // Fallback to localhost; use dev console port by default...\n  const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n  const web3 = new Web3(provider);\n  console.log('No web3 instance injected, using Local web3.');\n  return web3;\n};\nasync function loadContract(dispatch: Dispatch) {\n  const web3 = await loadWeb3();\n  if (window.ethereum) {\n    window.ethereum.on('accountsChanged', () => {\n      window.location.reload(true);\n    });\n    window.ethereum.on('networkChanged', () => {\n      window.location.reload(true);\n    });\n  }\n  if (web3) {\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    const network = await web3.eth.net.getId();\n    const deployedAddress = EthTw33t.networks[network].address;\n    const { abi } = EthTw33t;\n    const contract = new web3.eth.Contract(\n      (abi as unknown) as AbiItem,\n      deployedAddress,\n      {\n        from: account\n      }\n    );\n    let registered = false;\n    registered = await contract.methods.isRegUser().call();\n    let handle = null;\n    if (registered) {\n      handle = await contract.methods\n        .addressUserName(contract.options.from)\n        .call();\n    }\n\n    const tweets = [];\n    let nTweets = 0;\n    nTweets = await contract.methods.nTweets().call();\n    if (nTweets > 0) {\n      const upperIndexRange = nTweets - 1 >= 0 ? nTweets - 1 : 0;\n      const lowerIndexRange =\n        upperIndexRange - (MAX_TWEETS_PER_PAGE - 1) >= 0\n          ? upperIndexRange - (MAX_TWEETS_PER_PAGE - 1)\n          : 0;\n      for (let i = upperIndexRange; i >= lowerIndexRange; i -= 1) {\n        const tweet = await contract.methods.tweets(i).call();\n        const nComments = await contract.methods.tweetCommentLength(i).call();\n        tweet.nComments = nComments;\n        tweet.comments = [];\n        if (nComments > 0) {\n          for (let j = nComments - 1; j >= 0; j--) {\n            const commentId = await contract.methods\n              .getTweetCommentId(tweet.tweetId, j)\n              .call();\n            const comment = await contract.methods.comments(commentId).call();\n            tweet.comments.push(comment);\n          }\n        }\n        tweets.push(tweet);\n      }\n    }\n\n    dispatch({\n      type: 'loadContract',\n      payload: { web3, contract, registered, handle, nTweets, tweets }\n    });\n  }\n}\n\nasync function loadTweets(state: State, dispatch: Dispatch, page = 0) {\n  const { contract } = state;\n  if (contract) {\n    let offset = state.page - 1;\n    if (page > 0) {\n      offset = page - 1;\n    }\n    const tweets = [];\n    let nTweets = 0;\n    nTweets = await contract.methods.nTweets().call();\n    if (nTweets > 0) {\n      const upperIndexRange =\n        nTweets - 1 - offset * MAX_TWEETS_PER_PAGE >= 0\n          ? nTweets - 1 - offset * MAX_TWEETS_PER_PAGE\n          : 0;\n      const lowerIndexRange =\n        upperIndexRange - (MAX_TWEETS_PER_PAGE - 1) >= 0\n          ? upperIndexRange - (MAX_TWEETS_PER_PAGE - 1)\n          : 0;\n      for (let i = upperIndexRange; i >= lowerIndexRange; i -= 1) {\n        const tweet = await contract.methods.tweets(i).call();\n        const nComments = await contract.methods.tweetCommentLength(i).call();\n        tweet.nComments = nComments;\n        tweet.comments = [];\n        if (nComments > 0) {\n          for (let j = nComments - 1; j >= 0; j--) {\n            const commentId = await contract.methods\n              .getTweetCommentId(tweet.tweetId, j)\n              .call();\n            const comment = await contract.methods.comments(commentId).call();\n            tweet.comments.push(comment);\n          }\n        }\n        tweets.push(tweet);\n      }\n    }\n    dispatch({\n      type: 'loadTweets',\n      payload: { nTweets, tweets }\n    });\n  }\n}\nasync function loadUser(state: State, dispatch: Dispatch) {\n  const { contract } = state;\n  if (contract) {\n    let isReg = false;\n    isReg = await contract.methods.isRegUser().call();\n    let name = null;\n    if (isReg) {\n      name = await contract.methods\n        .addressUserName(contract.options.from)\n        .call();\n    }\n    dispatch({ type: 'loadUser', payload: { name, isReg } });\n  }\n}\n\nasync function newTweet(state: State, dispatch: Dispatch, msg: string) {\n  const { contract } = state;\n  if (contract && state.registered) {\n    await contract.methods.tweet(msg).send();\n    loadTweets(state, dispatch);\n  }\n}\nasync function reTweet(\n  state: State,\n  dispatch: Dispatch,\n  msg: string,\n  retweetId: number\n) {\n  const { contract } = state;\n  if (contract && state.registered) {\n    await contract.methods.retweet(msg, retweetId).send();\n    loadTweets(state, dispatch);\n  }\n}\n\nasync function readTweet(state: State, id: number): Promise<Tweet> {\n  const { contract } = state;\n  if (contract) {\n    const t = await contract.methods.tweets(id).call();\n    return t;\n  }\n  throw new Error('tweet not found');\n}\nasync function newComment(\n  state: State,\n  dispatch: Dispatch,\n  tweetId: number,\n  msg: string\n) {\n  const { contract } = state;\n  if (contract && state.registered) {\n    await contract.methods.comment(tweetId, msg).send();\n    loadTweets(state, dispatch);\n  }\n}\nexport {\n  Web3Provider,\n  useWeb3State,\n  useWeb3Dispatch,\n  loadContract,\n  loadUser,\n  loadTweets,\n  newTweet,\n  reTweet,\n  readTweet,\n  newComment,\n  LoadingProvider,\n  useLoadingDispatch,\n  useLoadingState,\n  MAX_TWEETS_PER_PAGE\n};\n","import React from 'react';\nimport { useLoadingState } from './Store';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2)\n    },\n    height: 10\n  }\n}));\n\nexport default function Progress() {\n  const classes = useStyles();\n  const state = useLoadingState();\n  return (\n    <>\n      {state && <LinearProgress color=\"secondary\" className={classes.root} />}\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWeb3State, useWeb3Dispatch, loadUser } from './Store';\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    // marginLeft: theme.spacing(1),\n    // marginRight: theme.spacing(1),\n    margin: theme.spacing(1),\n    width: 300\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  paper: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  }\n}));\nconst UserRegistration: React.FC = () => {\n  const classes = useStyles();\n  const state = useWeb3State();\n  const dispatch = useWeb3Dispatch();\n  const [handle, setHandle] = useState('');\n  const [registering, setRegistering] = useState(false);\n  //   const state = useWeb3State();\n  const register = async () => {\n    setRegistering(true);\n    if (state.contract) {\n      setRegistering(true);\n      try {\n        await state.contract.methods.register(handle).send();\n        loadUser(state, dispatch);\n      } catch (e) {\n        console.error(e);\n      }\n      setRegistering(false);\n    }\n  };\n\n  return (\n    <>\n      <Grid container direction=\"row\">\n        {state.registered === false && state.contract && (\n          <>\n            <Grid item>\n              <TextField\n                className={classes.textField}\n                label=\"handle\"\n                variant=\"filled\"\n                value={handle}\n                onChange={e => {\n                  setHandle(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item>\n              <Button\n                className={classes.button}\n                color=\"primary\"\n                variant=\"contained\"\n                size=\"medium\"\n                onClick={register}\n              >\n                register\n              </Button>\n            </Grid>\n          </>\n        )}\n        {registering && (\n          <Grid item>\n            <CircularProgress className={classes.button} color=\"secondary\" />\n          </Grid>\n        )}\n        {state.registered && (\n          <Grid item>\n            <Paper className={classes.paper}>\n              <Typography color=\"textPrimary\" variant=\"h6\">\n                Hello @{state.handle}\n              </Typography>\n            </Paper>\n          </Grid>\n        )}\n      </Grid>\n    </>\n  );\n};\n\nexport default UserRegistration;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  useWeb3State,\n  useWeb3Dispatch,\n  reTweet,\n  useLoadingDispatch\n} from './Store';\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    // marginLeft: theme.spacing(1),\n    // marginRight: theme.spacing(1),\n    width: 300\n  },\n  button: {}\n}));\nexport default function ReTweet(props: any) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [tweetMsg, setMsg] = React.useState('');\n  const state = useWeb3State();\n  const dispatch = useWeb3Dispatch();\n  const loadingDispatch = useLoadingDispatch();\n  const handleNewTweet = async () => {\n    loadingDispatch(true);\n    try {\n      await reTweet(state, dispatch, tweetMsg, props.reTweetId);\n    } catch (e) {\n      console.error(e);\n    }\n    loadingDispatch(false);\n    setMsg('');\n    setOpen(false);\n  };\n  const handleMsgChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setMsg(e.target.value);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button\n        // variant=\"contained\"\n        color=\"default\"\n        onClick={handleClickOpen}\n        disabled={!state.registered}\n        className={classes.button}\n      >\n        ReTweet!\n      </Button>\n      <Dialog\n        fullWidth\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">ReTweet</DialogTitle>\n        <DialogContent>\n          <DialogContentText>retweet: '{props.reTweetMsg}'</DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"...\"\n            type=\"text\"\n            fullWidth\n            value={tweetMsg}\n            onChange={handleMsgChange}\n            multiline\n            rows=\"5\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" variant=\"contained\">\n            Cancel\n          </Button>\n          <Button onClick={handleNewTweet} color=\"primary\" variant=\"contained\">\n            ReTweet!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport Paper from '@material-ui/core/Paper';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {\n  useWeb3State,\n  useWeb3Dispatch,\n  newComment,\n  useLoadingDispatch\n} from './Store';\n\nexport default function NewComment(props: any) {\n  const [open, setOpen] = React.useState(false);\n  const [commentMsg, setMsg] = React.useState('');\n  const state = useWeb3State();\n  const dispatch = useWeb3Dispatch();\n  const loadingDispatch = useLoadingDispatch();\n\n  const handleNewComment = async () => {\n    loadingDispatch(true);\n    try {\n      await newComment(state, dispatch, props.tweetId, commentMsg);\n    } catch (e) {\n      console.error(e);\n    }\n    loadingDispatch(false);\n    setMsg('');\n  };\n  const handleMsgChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setMsg(e.target.value);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Button\n        size=\"small\"\n        onClick={handleClickOpen}\n      >{`${props.nComments} Comments`}</Button>\n      <Dialog\n        fullWidth\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          #{props.tweetId} Comments\n        </DialogTitle>\n        <DialogContent>\n          {props.comments.map((t: any, i: any) => {\n            return (\n              <Paper key={t.commentId}>\n                <Typography variant=\"body2\" color=\"textPrimary\">\n                  {t.comment}\n                </Typography>\n                <Typography variant=\"caption\" color=\"secondary\">\n                  @{t.authorName}\n                </Typography>\n              </Paper>\n            );\n          })}\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"...\"\n            type=\"text\"\n            fullWidth\n            value={commentMsg}\n            onChange={handleMsgChange}\n            multiline\n            rows=\"5\"\n            disabled={!state.registered}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={handleClose}\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={!state.registered}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleNewComment}\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={!state.registered}\n          >\n            Comment!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { useWeb3State, readTweet, useLoadingDispatch } from './Store';\n\nexport default function ReadTweet(props: any) {\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = React.useState('');\n  const state = useWeb3State();\n  const loadingDispatch = useLoadingDispatch();\n\n  const handleClickOpen = async () => {\n    loadingDispatch(true);\n    try {\n      const tweet = await readTweet(state, props.tweetId);\n      if (tweet !== null) {\n        setMessage(tweet.message);\n        setOpen(true);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    loadingDispatch(false);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button onClick={handleClickOpen} disabled={!state.registered}>\n        retweeted: #{props.tweetId}\n      </Button>\n      <Dialog\n        fullWidth\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">#{props.tweetId}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>{message}</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" variant=\"contained\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  useWeb3State,\n  useWeb3Dispatch,\n  useLoadingState,\n  useLoadingDispatch,\n  loadTweets,\n  MAX_TWEETS_PER_PAGE\n} from './Store';\nimport ReTweet from './ReTweet';\nimport NewComment from './NewComment';\nimport ReadTweet from './ReadTweet';\n// import { useWeb3State } from './Store';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    backgroundColor: theme.palette.background.default\n  },\n  container: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n    minWidth: 320,\n    maxWidth: 320,\n    overflowWrap: 'break-word'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 50\n  }\n}));\n\nconst Tweets: React.FC = () => {\n  const classes = useStyles();\n  const state = useWeb3State();\n  const dispatch = useWeb3Dispatch();\n  const loadingState = useLoadingState();\n  const loadingDispatch = useLoadingDispatch();\n  const [offset, setOffset] = useState(1);\n  const handleOffset = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const page = Number(e.target.value);\n    const offset = page - 1;\n    if (state.nTweets > offset * MAX_TWEETS_PER_PAGE) {\n      setOffset(page);\n      dispatch({ type: 'loadPage', payload: page });\n      try {\n        loadingDispatch(true);\n        await loadTweets(state, dispatch, page);\n        loadingDispatch(false);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  };\n  const tweets = state.tweets.map(t => (\n    <Grid item xs key={t.tweetId} zeroMinWidth>\n      <Paper className={classes.container} key={t.tweetId}>\n        <Typography color=\"textPrimary\" variant=\"h5\">\n          #{t.tweetId}\n        </Typography>\n        <Typography color=\"textPrimary\" variant=\"h6\">\n          {t.message}\n        </Typography>\n        <Typography color=\"secondary\" variant=\"body1\">\n          @{t.authorName}\n        </Typography>\n        {t.retweeted && <ReadTweet tweetId={t.retweetId} />}\n        <NewComment\n          key={t.tweetId}\n          tweetId={t.tweetId}\n          nComments={t.nComments}\n          comments={t.comments}\n        />\n        <ReTweet reTweetId={t.tweetId} reTweetMsg={t.message} />\n      </Paper>\n    </Grid>\n  ));\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"flex-start\"\n          alignItems=\"stretch\"\n          spacing={2}\n        >\n          <Grid item>\n            {state.registered && (\n              <TextField\n                color=\"secondary\"\n                id=\"standard-number\"\n                label=\"Page: \"\n                type=\"number\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true\n                }}\n                inputProps={{ step: '1', min: '1' }}\n                margin=\"normal\"\n                onChange={handleOffset}\n                value={offset}\n                disabled={loadingState}\n              />\n            )}\n          </Grid>\n          {tweets}\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default Tweets;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  loadContract,\n  useWeb3Dispatch,\n  useWeb3State,\n  useLoadingDispatch\n} from './Store';\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1)\n  },\n  typo: {\n    color: theme.palette.text.primary\n  }\n}));\n\nconst Web3Button: React.FC = () => {\n  const classes = useStyles();\n  const dispatch = useWeb3Dispatch();\n  const loading = useLoadingDispatch();\n  const state = useWeb3State();\n  async function buttonLoadContract(event: React.MouseEvent<HTMLElement>) {\n    event.preventDefault();\n    loading(true);\n    try {\n      await loadContract(dispatch);\n    } catch (e) {\n      console.error(e);\n    }\n    loading(false);\n  }\n  return (\n    <Button\n      className={classes.button}\n      variant=\"contained\"\n      color=\"primary\"\n      disabled={state.web3 !== null}\n      onClick={buttonLoadContract}\n    >\n      Load Web3\n    </Button>\n  );\n};\n\nexport default Web3Button;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  useWeb3State,\n  useWeb3Dispatch,\n  newTweet,\n  useLoadingDispatch\n} from './Store';\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    // marginLeft: theme.spacing(1),\n    // marginRight: theme.spacing(1),\n    width: 300\n  },\n  button: {\n    margin: theme.spacing(1)\n  }\n}));\nexport default function NewTweet() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [tweetMsg, setMsg] = React.useState('');\n  const state = useWeb3State();\n  const dispatch = useWeb3Dispatch();\n  const loadingDispatch = useLoadingDispatch();\n  const handleNewTweet = async () => {\n    loadingDispatch(true);\n    try {\n      await newTweet(state, dispatch, tweetMsg);\n    } catch (e) {\n      console.error(e);\n    }\n    loadingDispatch(false);\n    setMsg('');\n    setOpen(false);\n  };\n  const handleMsgChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setMsg(e.target.value);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      {state.registered && (\n        <>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleClickOpen}\n            disabled={!state.registered}\n            className={classes.button}\n          >\n            Tweet!\n          </Button>\n          <Dialog\n            fullWidth\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\"\n          >\n            <DialogTitle id=\"form-dialog-title\">New tweet</DialogTitle>\n            <DialogContent>\n              <DialogContentText>Tweet:</DialogContentText>\n              <TextField\n                autoFocus\n                margin=\"dense\"\n                id=\"name\"\n                label=\"...\"\n                type=\"text\"\n                fullWidth\n                value={tweetMsg}\n                onChange={handleMsgChange}\n                multiline\n                rows=\"5\"\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"primary\" variant=\"contained\">\n                Cancel\n              </Button>\n              <Button\n                onClick={handleNewTweet}\n                color=\"primary\"\n                variant=\"contained\"\n              >\n                Tweet!\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </>\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport Progress from './Progress';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport UserRegistration from './UserRegistration';\nimport Tweets from './Tweets';\nimport Web3Button from './Web3Button';\nimport NewTweet from './NewTweet';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minHeight: '100vh',\n    height: '100%',\n    backgroundColor: theme.palette.background.default\n  },\n  typo: {\n    color: theme.palette.text.primary\n  }\n}));\nconst Home: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <>\n      <Container className={classes.root} maxWidth={false}>\n        <Progress />\n        <Grid\n          container\n          spacing={1}\n          direction=\"column\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          <Grid item>\n            <Web3Button />\n          </Grid>\n          <Grid item>\n            <UserRegistration />\n          </Grid>\n          <Grid item>\n            <NewTweet />\n          </Grid>\n          <Grid item>\n            <Tweets />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport Home from './Home';\nimport { Web3Provider, LoadingProvider } from './Store';\n\nconst appTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n});\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={appTheme}>\n      <LoadingProvider>\n        <Web3Provider>\n          <Home />\n        </Web3Provider>\n      </LoadingProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}