{"version":3,"sources":["Store.tsx","Progress.tsx","UserRegistration.tsx","ReTweet.tsx","NewComment.tsx","ReadTweet.tsx","Tweets.tsx","Web3Button.tsx","NewTweet.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingContext","React","createContext","undefined","LoadingDispatchContext","Web3Context","Web3DispatchContext","loadingReducer","state","action","web3Reducer","actionType","type","web3","payload","contract","handle","registered","nTweets","tweets","name","isReg","page","Error","LoadingProvider","children","useReducer","dispatch","Provider","value","Web3Provider","useLoadingState","context","useContext","useLoadingDispatch","useWeb3State","useWeb3Dispatch","loadWeb3","a","window","ethereum","autoRefreshOnNetworkChange","Web3","enable","request","method","chainId","console","log","provider","providers","HttpProvider","loadContract","on","location","reload","eth","getAccounts","accounts","account","net","getId","network","deployedAddress","EthTw33t","networks","address","abi","Contract","from","methods","isRegUser","call","addressUserName","options","lowerIndexRange","upperIndexRange","i","tweet","tweetCommentLength","nComments","comments","j","getTweetCommentId","tweetId","commentId","comment","push","loadTweets","offset","loadUser","newTweet","msg","send","reTweet","retweetId","retweet","readTweet","id","t","newComment","useStyles","makeStyles","theme","root","width","marginTop","spacing","height","Progress","classes","LinearProgress","color","className","textField","margin","button","paper","padding","backgroundColor","palette","secondary","main","UserRegistration","useState","setHandle","registering","setRegistering","register","error","Grid","container","direction","item","TextField","label","variant","onChange","e","target","Button","size","onClick","CircularProgress","Paper","Typography","ReTweet","props","open","setOpen","tweetMsg","setMsg","loadingDispatch","handleNewTweet","reTweetId","handleClose","disabled","Dialog","fullWidth","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","reTweetMsg","autoFocus","multiline","rows","DialogActions","NewComment","commentMsg","handleNewComment","map","authorName","ReadTweet","message","setMessage","handleClickOpen","display","flexWrap","background","default","minWidth","maxWidth","overflowWrap","marginLeft","marginRight","Tweets","loadingState","setOffset","handleOffset","Number","xs","zeroMinWidth","retweeted","justify","alignItems","InputLabelProps","shrink","inputProps","step","min","typo","text","primary","Web3Button","loading","event","preventDefault","NewTweet","minHeight","Home","Container","appTheme","createMuiTheme","App","ThemeProvider","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68983260.chunk.js","sourcesContent":["import React from 'react';\r\nimport Web3 from 'web3';\r\nimport { AbiItem } from 'web3-utils';\r\nimport { Contract } from 'web3-eth-contract';\r\nimport EthTw33t from './contracts/EthTw33t.json';\r\n\r\nconst MAX_TWEETS_PER_PAGE = 5;\r\ndeclare global {\r\n  interface Window {\r\n    ethereum: any;\r\n    web3: any;\r\n  }\r\n}\r\ntype Action =\r\n  | {\r\n      type: 'loadContract';\r\n      payload: any;\r\n    }\r\n  | {\r\n      type: 'loadUser';\r\n      payload: any;\r\n    }\r\n  | {\r\n      type: 'loadTweets';\r\n      payload: any;\r\n    }\r\n  | {\r\n      type: 'loadPage';\r\n      payload: number;\r\n    };\r\ntype Dispatch = (action: Action) => void;\r\ntype DispatchLoading = (action: boolean) => void;\r\ntype Tweet = {\r\n  author: string;\r\n  authorName: string;\r\n  message: string;\r\n  retweeted: boolean;\r\n  retweetId: number;\r\n  tweetId: number;\r\n  nComments: number;\r\n  comments: string[];\r\n};\r\ntype State = {\r\n  web3: Web3 | null;\r\n  contract: Contract | null;\r\n  nTweets: number;\r\n  tweets: Tweet[];\r\n  handle: string | null;\r\n  registered: boolean;\r\n  page: number;\r\n};\r\ntype Web3ProviderProps = { children: React.ReactNode };\r\nconst LoadingContext = React.createContext<boolean | undefined>(undefined);\r\nconst LoadingDispatchContext = React.createContext<DispatchLoading | undefined>(\r\n  undefined\r\n);\r\nconst Web3Context = React.createContext<State | undefined>(undefined);\r\nconst Web3DispatchContext = React.createContext<Dispatch | undefined>(\r\n  undefined\r\n);\r\nfunction loadingReducer(state: boolean, action: boolean) {\r\n  return action;\r\n}\r\nfunction web3Reducer(state: State, action: Action) {\r\n  const actionType = action.type;\r\n  switch (actionType) {\r\n    case 'loadContract': {\r\n      return {\r\n        ...state,\r\n        web3: action.payload.web3,\r\n        contract: action.payload.contract,\r\n        handle: action.payload.handle,\r\n        registered: action.payload.registered,\r\n        nTweets: action.payload.nTweets,\r\n        tweets: action.payload.tweets\r\n      };\r\n    }\r\n    case 'loadUser': {\r\n      return {\r\n        ...state,\r\n        handle: action.payload.name,\r\n        registered: action.payload.isReg\r\n      };\r\n    }\r\n    case 'loadTweets': {\r\n      return {\r\n        ...state,\r\n        tweets: action.payload.tweets,\r\n        nTweets: action.payload.nTweets\r\n      };\r\n    }\r\n    case 'loadPage': {\r\n      return {\r\n        ...state,\r\n        page: action.payload\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unhandled action type: ${actionType}`);\r\n    }\r\n  }\r\n}\r\nfunction LoadingProvider({ children }: Web3ProviderProps) {\r\n  const [state, dispatch] = React.useReducer(loadingReducer, false);\r\n  return (\r\n    <LoadingContext.Provider value={state}>\r\n      <LoadingDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </LoadingDispatchContext.Provider>\r\n    </LoadingContext.Provider>\r\n  );\r\n}\r\nfunction Web3Provider({ children }: Web3ProviderProps) {\r\n  const [state, dispatch] = React.useReducer(web3Reducer, {\r\n    web3: null,\r\n    contract: null,\r\n    nTweets: 0,\r\n    tweets: [],\r\n    handle: null,\r\n    registered: false,\r\n    page: 1\r\n  });\r\n  return (\r\n    <Web3Context.Provider value={state}>\r\n      <Web3DispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </Web3DispatchContext.Provider>\r\n    </Web3Context.Provider>\r\n  );\r\n}\r\nfunction useLoadingState() {\r\n  const context = React.useContext(LoadingContext);\r\n  if (context === undefined) {\r\n    throw new Error('need Provider');\r\n  }\r\n  return context;\r\n}\r\nfunction useLoadingDispatch() {\r\n  const context = React.useContext(LoadingDispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error('need Provider');\r\n  }\r\n  return context;\r\n}\r\nfunction useWeb3State() {\r\n  const context = React.useContext(Web3Context);\r\n  if (context === undefined) {\r\n    throw new Error('need Provider');\r\n  }\r\n  return context;\r\n}\r\nfunction useWeb3Dispatch() {\r\n  const context = React.useContext(Web3DispatchContext);\r\n  if (context === undefined) {\r\n    throw new Error('need Provider');\r\n  }\r\n  return context;\r\n}\r\n\r\nconst loadWeb3 = async (): Promise<Web3> => {\r\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n  // Modern dapp browsers...\r\n  if (window.ethereum) {\r\n    window.ethereum.autoRefreshOnNetworkChange = false;\r\n    const web3 = new Web3(window.ethereum);\r\n    // Request account access if needed\r\n    await window.ethereum.enable();\r\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n    console.log(chainId)\r\n    // Acccounts now exposed\r\n    return web3;\r\n  }\r\n  // Legacy dapp browsers...\r\n  if (window.web3) {\r\n    // Use Mist/MetaMask's provider.\r\n    const { web3 } = window;\r\n    console.log('Injected web3 detected.');\r\n    return web3;\r\n  }\r\n  // Fallback to localhost; use dev console port by default...\r\n  const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\r\n  const web3 = new Web3(provider);\r\n  console.log('No web3 instance injected, using Local web3.');\r\n  return web3;\r\n};\r\nasync function loadContract(dispatch: Dispatch) {\r\n  const web3 = await loadWeb3();\r\n  if (window.ethereum) {\r\n    window.ethereum.on('accountsChanged', () => {\r\n      window.location.reload(true);\r\n    });\r\n    window.ethereum.on('networkChanged', () => {\r\n      window.location.reload(true);\r\n    });\r\n  }\r\n  if (web3) {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const account = accounts[0];\r\n    const network = await web3.eth.net.getId();\r\n    const deployedAddress = EthTw33t.networks[network].address;\r\n    const { abi } = EthTw33t;\r\n    const contract = new web3.eth.Contract(\r\n      (abi as unknown) as AbiItem,\r\n      deployedAddress,\r\n      {\r\n        from: account\r\n      }\r\n    );\r\n    let registered = false;\r\n    registered = await contract.methods.isRegUser().call();\r\n    let handle = null;\r\n    if (registered) {\r\n      handle = await contract.methods\r\n        .addressUserName(contract.options.from)\r\n        .call();\r\n    }\r\n\r\n    const tweets = [];\r\n    let nTweets = 0;\r\n    nTweets = await contract.methods.nTweets().call();\r\n    if (nTweets > 0) {\r\n      const upperIndexRange = nTweets - 1 >= 0 ? nTweets - 1 : 0;\r\n      const lowerIndexRange =\r\n        upperIndexRange - (MAX_TWEETS_PER_PAGE - 1) >= 0\r\n          ? upperIndexRange - (MAX_TWEETS_PER_PAGE - 1)\r\n          : 0;\r\n      for (let i = upperIndexRange; i >= lowerIndexRange; i -= 1) {\r\n        const tweet = await contract.methods.tweets(i).call();\r\n        const nComments = await contract.methods.tweetCommentLength(i).call();\r\n        tweet.nComments = nComments;\r\n        tweet.comments = [];\r\n        if (nComments > 0) {\r\n          for (let j = nComments - 1; j >= 0; j--) {\r\n            const commentId = await contract.methods\r\n              .getTweetCommentId(tweet.tweetId, j)\r\n              .call();\r\n            const comment = await contract.methods.comments(commentId).call();\r\n            tweet.comments.push(comment);\r\n          }\r\n        }\r\n        tweets.push(tweet);\r\n      }\r\n    }\r\n\r\n    dispatch({\r\n      type: 'loadContract',\r\n      payload: { web3, contract, registered, handle, nTweets, tweets }\r\n    });\r\n  }\r\n}\r\n\r\nasync function loadTweets(state: State, dispatch: Dispatch, page = 0) {\r\n  const { contract } = state;\r\n  if (contract) {\r\n    let offset = state.page - 1;\r\n    if (page > 0) {\r\n      offset = page - 1;\r\n    }\r\n    const tweets = [];\r\n    let nTweets = 0;\r\n    nTweets = await contract.methods.nTweets().call();\r\n    if (nTweets > 0) {\r\n      const upperIndexRange =\r\n        nTweets - 1 - offset * MAX_TWEETS_PER_PAGE >= 0\r\n          ? nTweets - 1 - offset * MAX_TWEETS_PER_PAGE\r\n          : 0;\r\n      const lowerIndexRange =\r\n        upperIndexRange - (MAX_TWEETS_PER_PAGE - 1) >= 0\r\n          ? upperIndexRange - (MAX_TWEETS_PER_PAGE - 1)\r\n          : 0;\r\n      for (let i = upperIndexRange; i >= lowerIndexRange; i -= 1) {\r\n        const tweet = await contract.methods.tweets(i).call();\r\n        const nComments = await contract.methods.tweetCommentLength(i).call();\r\n        tweet.nComments = nComments;\r\n        tweet.comments = [];\r\n        if (nComments > 0) {\r\n          for (let j = nComments - 1; j >= 0; j--) {\r\n            const commentId = await contract.methods\r\n              .getTweetCommentId(tweet.tweetId, j)\r\n              .call();\r\n            const comment = await contract.methods.comments(commentId).call();\r\n            tweet.comments.push(comment);\r\n          }\r\n        }\r\n        tweets.push(tweet);\r\n      }\r\n    }\r\n    dispatch({\r\n      type: 'loadTweets',\r\n      payload: { nTweets, tweets }\r\n    });\r\n  }\r\n}\r\nasync function loadUser(state: State, dispatch: Dispatch) {\r\n  const { contract } = state;\r\n  if (contract) {\r\n    let isReg = false;\r\n    isReg = await contract.methods.isRegUser().call();\r\n    let name = null;\r\n    if (isReg) {\r\n      name = await contract.methods\r\n        .addressUserName(contract.options.from)\r\n        .call();\r\n    }\r\n    dispatch({ type: 'loadUser', payload: { name, isReg } });\r\n  }\r\n}\r\n\r\nasync function newTweet(state: State, dispatch: Dispatch, msg: string) {\r\n  const { contract } = state;\r\n  if (contract && state.registered) {\r\n    await contract.methods.tweet(msg).send();\r\n    loadTweets(state, dispatch);\r\n  }\r\n}\r\nasync function reTweet(\r\n  state: State,\r\n  dispatch: Dispatch,\r\n  msg: string,\r\n  retweetId: number\r\n) {\r\n  const { contract } = state;\r\n  if (contract && state.registered) {\r\n    await contract.methods.retweet(msg, retweetId).send();\r\n    loadTweets(state, dispatch);\r\n  }\r\n}\r\n\r\nasync function readTweet(state: State, id: number): Promise<Tweet> {\r\n  const { contract } = state;\r\n  if (contract) {\r\n    const t = await contract.methods.tweets(id).call();\r\n    return t;\r\n  }\r\n  throw new Error('tweet not found');\r\n}\r\nasync function newComment(\r\n  state: State,\r\n  dispatch: Dispatch,\r\n  tweetId: number,\r\n  msg: string\r\n) {\r\n  const { contract } = state;\r\n  if (contract && state.registered) {\r\n    await contract.methods.comment(tweetId, msg).send();\r\n    loadTweets(state, dispatch);\r\n  }\r\n}\r\nexport {\r\n  Web3Provider,\r\n  useWeb3State,\r\n  useWeb3Dispatch,\r\n  loadContract,\r\n  loadUser,\r\n  loadTweets,\r\n  newTweet,\r\n  reTweet,\r\n  readTweet,\r\n  newComment,\r\n  LoadingProvider,\r\n  useLoadingDispatch,\r\n  useLoadingState,\r\n  MAX_TWEETS_PER_PAGE\r\n};\r\n","import React from 'react';\r\nimport { useLoadingState } from './Store';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2)\r\n    },\r\n    height: 10\r\n  }\r\n}));\r\n\r\nexport default function Progress() {\r\n  const classes = useStyles();\r\n  const state = useLoadingState();\r\n  return (\r\n    <>\r\n      {state && <LinearProgress color=\"secondary\" className={classes.root} />}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useWeb3State, useWeb3Dispatch, loadUser } from './Store';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  textField: {\r\n    // marginLeft: theme.spacing(1),\r\n    // marginRight: theme.spacing(1),\r\n    margin: theme.spacing(1),\r\n    width: 300\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(1),\r\n    padding: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  }\r\n}));\r\nconst UserRegistration: React.FC = () => {\r\n  const classes = useStyles();\r\n  const state = useWeb3State();\r\n  const dispatch = useWeb3Dispatch();\r\n  const [handle, setHandle] = useState('');\r\n  const [registering, setRegistering] = useState(false);\r\n  //   const state = useWeb3State();\r\n  const register = async () => {\r\n    setRegistering(true);\r\n    if (state.contract) {\r\n      setRegistering(true);\r\n      try {\r\n        await state.contract.methods.register(handle).send();\r\n        loadUser(state, dispatch);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      setRegistering(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\">\r\n        {state.registered === false && state.contract && (\r\n          <>\r\n            <Grid item>\r\n              <TextField\r\n                className={classes.textField}\r\n                label=\"handle\"\r\n                variant=\"filled\"\r\n                value={handle}\r\n                onChange={e => {\r\n                  setHandle(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                className={classes.button}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                size=\"medium\"\r\n                onClick={register}\r\n              >\r\n                register\r\n              </Button>\r\n            </Grid>\r\n          </>\r\n        )}\r\n        {registering && (\r\n          <Grid item>\r\n            <CircularProgress className={classes.button} color=\"secondary\" />\r\n          </Grid>\r\n        )}\r\n        {state.registered && (\r\n          <Grid item>\r\n            <Paper className={classes.paper}>\r\n              <Typography color=\"textPrimary\" variant=\"h6\">\r\n                Hello @{state.handle}\r\n              </Typography>\r\n            </Paper>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserRegistration;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  useWeb3State,\r\n  useWeb3Dispatch,\r\n  reTweet,\r\n  useLoadingDispatch\r\n} from './Store';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  textField: {\r\n    // marginLeft: theme.spacing(1),\r\n    // marginRight: theme.spacing(1),\r\n    width: 300\r\n  },\r\n  button: {}\r\n}));\r\nexport default function ReTweet(props: any) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [tweetMsg, setMsg] = React.useState('');\r\n  const state = useWeb3State();\r\n  const dispatch = useWeb3Dispatch();\r\n  const loadingDispatch = useLoadingDispatch();\r\n  const handleNewTweet = async () => {\r\n    loadingDispatch(true);\r\n    try {\r\n      await reTweet(state, dispatch, tweetMsg, props.reTweetId);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    loadingDispatch(false);\r\n    setMsg('');\r\n    setOpen(false);\r\n  };\r\n  const handleMsgChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        // variant=\"contained\"\r\n        color=\"default\"\r\n        onClick={handleClickOpen}\r\n        disabled={!state.registered}\r\n        className={classes.button}\r\n      >\r\n        ReTweet!\r\n      </Button>\r\n      <Dialog\r\n        fullWidth\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">ReTweet</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>retweet: '{props.reTweetMsg}'</DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"...\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={tweetMsg}\r\n            onChange={handleMsgChange}\r\n            multiline\r\n            rows=\"5\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" variant=\"contained\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleNewTweet} color=\"primary\" variant=\"contained\">\r\n            ReTweet!\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {\r\n  useWeb3State,\r\n  useWeb3Dispatch,\r\n  newComment,\r\n  useLoadingDispatch\r\n} from './Store';\r\n\r\nexport default function NewComment(props: any) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [commentMsg, setMsg] = React.useState('');\r\n  const state = useWeb3State();\r\n  const dispatch = useWeb3Dispatch();\r\n  const loadingDispatch = useLoadingDispatch();\r\n\r\n  const handleNewComment = async () => {\r\n    loadingDispatch(true);\r\n    try {\r\n      await newComment(state, dispatch, props.tweetId, commentMsg);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    loadingDispatch(false);\r\n    setMsg('');\r\n  };\r\n  const handleMsgChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        size=\"small\"\r\n        onClick={handleClickOpen}\r\n      >{`${props.nComments} Comments`}</Button>\r\n      <Dialog\r\n        fullWidth\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">\r\n          #{props.tweetId} Comments\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {props.comments.map((t: any, i: any) => {\r\n            return (\r\n              <Paper key={t.commentId}>\r\n                <Typography variant=\"body2\" color=\"textPrimary\">\r\n                  {t.comment}\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"secondary\">\r\n                  @{t.authorName}\r\n                </Typography>\r\n              </Paper>\r\n            );\r\n          })}\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"...\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={commentMsg}\r\n            onChange={handleMsgChange}\r\n            multiline\r\n            rows=\"5\"\r\n            disabled={!state.registered}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            disabled={!state.registered}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleNewComment}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            disabled={!state.registered}\r\n          >\r\n            Comment!\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { useWeb3State, readTweet, useLoadingDispatch } from './Store';\r\n\r\nexport default function ReadTweet(props: any) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [message, setMessage] = React.useState('');\r\n  const state = useWeb3State();\r\n  const loadingDispatch = useLoadingDispatch();\r\n\r\n  const handleClickOpen = async () => {\r\n    loadingDispatch(true);\r\n    try {\r\n      const tweet = await readTweet(state, props.tweetId);\r\n      if (tweet !== null) {\r\n        setMessage(tweet.message);\r\n        setOpen(true);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    loadingDispatch(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={handleClickOpen} disabled={!state.registered}>\r\n        retweeted: #{props.tweetId}\r\n      </Button>\r\n      <Dialog\r\n        fullWidth\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">#{props.tweetId}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>{message}</DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" variant=\"contained\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  useWeb3State,\r\n  useWeb3Dispatch,\r\n  useLoadingState,\r\n  useLoadingDispatch,\r\n  loadTweets,\r\n  MAX_TWEETS_PER_PAGE\r\n} from './Store';\r\nimport ReTweet from './ReTweet';\r\nimport NewComment from './NewComment';\r\nimport ReadTweet from './ReadTweet';\r\n// import { useWeb3State } from './Store';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    backgroundColor: theme.palette.background.default\r\n  },\r\n  container: {\r\n    margin: theme.spacing(1),\r\n    padding: theme.spacing(2),\r\n    minWidth: 320,\r\n    maxWidth: 320,\r\n    overflowWrap: 'break-word'\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 50\r\n  }\r\n}));\r\n\r\nconst Tweets: React.FC = () => {\r\n  const classes = useStyles();\r\n  const state = useWeb3State();\r\n  const dispatch = useWeb3Dispatch();\r\n  const loadingState = useLoadingState();\r\n  const loadingDispatch = useLoadingDispatch();\r\n  const [offset, setOffset] = useState(1);\r\n  const handleOffset = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const page = Number(e.target.value);\r\n    const offset = page - 1;\r\n    if (state.nTweets > offset * MAX_TWEETS_PER_PAGE) {\r\n      setOffset(page);\r\n      dispatch({ type: 'loadPage', payload: page });\r\n      try {\r\n        loadingDispatch(true);\r\n        await loadTweets(state, dispatch, page);\r\n        loadingDispatch(false);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n  };\r\n  const tweets = state.tweets.map(t => (\r\n    <Grid item xs key={t.tweetId} zeroMinWidth>\r\n      <Paper className={classes.container} key={t.tweetId}>\r\n        <Typography color=\"textPrimary\" variant=\"h5\">\r\n          #{t.tweetId}\r\n        </Typography>\r\n        <Typography color=\"textPrimary\" variant=\"h6\">\r\n          {t.message}\r\n        </Typography>\r\n        <Typography color=\"secondary\" variant=\"body1\">\r\n          @{t.authorName}\r\n        </Typography>\r\n        {t.retweeted && <ReadTweet tweetId={t.retweetId} />}\r\n        <NewComment\r\n          key={t.tweetId}\r\n          tweetId={t.tweetId}\r\n          nComments={t.nComments}\r\n          comments={t.comments}\r\n        />\r\n        <ReTweet reTweetId={t.tweetId} reTweetMsg={t.message} />\r\n      </Paper>\r\n    </Grid>\r\n  ));\r\n  return (\r\n    <>\r\n      <div className={classes.root}>\r\n        <Grid\r\n          container\r\n          direction=\"column\"\r\n          justify=\"flex-start\"\r\n          alignItems=\"stretch\"\r\n          spacing={2}\r\n        >\r\n          <Grid item>\r\n            {state.nTweets > 0 && (\r\n              <TextField\r\n                color=\"secondary\"\r\n                id=\"standard-number\"\r\n                label=\"Page: \"\r\n                type=\"number\"\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                inputProps={{ step: '1', min: '1' }}\r\n                margin=\"normal\"\r\n                onChange={handleOffset}\r\n                value={offset}\r\n                disabled={loadingState}\r\n              />\r\n            )}\r\n          </Grid>\r\n          {tweets}\r\n        </Grid>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tweets;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  loadContract,\r\n  useWeb3Dispatch,\r\n  useWeb3State,\r\n  useLoadingDispatch\r\n} from './Store';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  typo: {\r\n    color: theme.palette.text.primary\r\n  }\r\n}));\r\n\r\nconst Web3Button: React.FC = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useWeb3Dispatch();\r\n  const loading = useLoadingDispatch();\r\n  const state = useWeb3State();\r\n  async function buttonLoadContract(event: React.MouseEvent<HTMLElement>) {\r\n    event.preventDefault();\r\n    loading(true);\r\n    try {\r\n      await loadContract(dispatch);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    loading(false);\r\n  }\r\n  return (\r\n    <Button\r\n      className={classes.button}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      disabled={state.web3 !== null}\r\n      onClick={buttonLoadContract}\r\n    >\r\n      Load Web3\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default Web3Button;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  useWeb3State,\r\n  useWeb3Dispatch,\r\n  newTweet,\r\n  useLoadingDispatch\r\n} from './Store';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  textField: {\r\n    // marginLeft: theme.spacing(1),\r\n    // marginRight: theme.spacing(1),\r\n    width: 300\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1)\r\n  }\r\n}));\r\nexport default function NewTweet() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [tweetMsg, setMsg] = React.useState('');\r\n  const state = useWeb3State();\r\n  const dispatch = useWeb3Dispatch();\r\n  const loadingDispatch = useLoadingDispatch();\r\n  const handleNewTweet = async () => {\r\n    loadingDispatch(true);\r\n    try {\r\n      await newTweet(state, dispatch, tweetMsg);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    loadingDispatch(false);\r\n    setMsg('');\r\n    setOpen(false);\r\n  };\r\n  const handleMsgChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {state.registered && (\r\n        <>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleClickOpen}\r\n            disabled={!state.registered}\r\n            className={classes.button}\r\n          >\r\n            Tweet!\r\n          </Button>\r\n          <Dialog\r\n            fullWidth\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">New tweet</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText>Tweet:</DialogContentText>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"...\"\r\n                type=\"text\"\r\n                fullWidth\r\n                value={tweetMsg}\r\n                onChange={handleMsgChange}\r\n                multiline\r\n                rows=\"5\"\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"primary\" variant=\"contained\">\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={handleNewTweet}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >\r\n                Tweet!\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Progress from './Progress';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport UserRegistration from './UserRegistration';\r\nimport Tweets from './Tweets';\r\nimport Web3Button from './Web3Button';\r\nimport NewTweet from './NewTweet';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    minHeight: '100vh',\r\n    height: '100%',\r\n    backgroundColor: theme.palette.background.default\r\n  },\r\n  typo: {\r\n    color: theme.palette.text.primary\r\n  }\r\n}));\r\nconst Home: React.FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Container className={classes.root} maxWidth={false}>\r\n        <Progress />\r\n        <Grid\r\n          container\r\n          spacing={1}\r\n          direction=\"column\"\r\n          justify=\"flex-start\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          <Grid item>\r\n            <Web3Button />\r\n          </Grid>\r\n          <Grid item>\r\n            <UserRegistration />\r\n          </Grid>\r\n          <Grid item>\r\n            <NewTweet />\r\n          </Grid>\r\n          <Grid item>\r\n            <Tweets />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Home from './Home';\r\nimport { Web3Provider, LoadingProvider } from './Store';\r\n\r\nconst appTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark'\r\n  }\r\n});\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ThemeProvider theme={appTheme}>\r\n      <LoadingProvider>\r\n        <Web3Provider>\r\n          <Home />\r\n        </Web3Provider>\r\n      </LoadingProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}